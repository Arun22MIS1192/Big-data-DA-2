REDUCER:

import java.io.IOException;
import java.util.HashMap;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class SOMReducer extends Reducer<IntWritable, Text, IntWritable, Text> {
    
    public void reduce(IntWritable key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
        HashMap<String, Integer> tagFrequency = new HashMap<>();
        for (Text val : values) {
            String tag = val.toString();
            tagFrequency.put(tag, tagFrequency.getOrDefault(tag, 0) + 1);
        }
 
        StringBuilder sb = new StringBuilder();
        for (String tag : tagFrequency.keySet()) {
            sb.append(tag).append(":").append(tagFrequency.get(tag)).append(", ");
        }
        
        context.write(key, new Text(sb.toString()));
    }
}

DRIVER:

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class SOMDriver {
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "SOM MovieLens");

        job.setJarByClass(SOMDriver.class);
        job.setMapperClass(SOMMapper.class);
        job.setReducerClass(SOMReducer.class);

        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(Text.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

